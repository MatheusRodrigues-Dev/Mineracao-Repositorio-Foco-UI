repository,file,content
openfext/vue-admin-next,vue.config.js,"const path = require('path');

const isProdMode = process.env.NODE_ENV === 'production';

const config = {
  publicPath: isProdMode ? '/vue-admin-next' : '/',
  css: {},
  filenameHashing: true
};

if (!isProdMode) {
  config.css.extract = false;
}

config.chainWebpack = webpackConfig => {};

config.configureWebpack = () => ({
  entry: path.resolve(__dirname, 'src/index.js'),
  output: {
    filename: `js/[name].[hash].js`,
    chunkFilename: `js/[name].[hash].js`
  }
});

module.exports = config;
"
openbmc/webui-vue,vue.config.js,"const CompressionPlugin = require('compression-webpack-plugin');
const webpack = require('webpack');
const LimitChunkCountPlugin = webpack.optimize.LimitChunkCountPlugin;

module.exports = {
  devServer: {
    server: {
      type: 'https',
    },
    proxy: {
      '/': {
        target: process.env.BASE_URL,
        onProxyRes: (proxyRes) => {
          // This header is ignored in the browser so removing
          // it so we don't see warnings in the browser console
          delete proxyRes.headers['strict-transport-security'];
        },
      },
    },
    port: 8000,
  },
  productionSourceMap: false,
  chainWebpack: (config) => {
    config.resolve.alias.set('vue', '@vue/compat');
    config.module
      .rule('vue')
      .use('vue-loader')
      .tap((options) => {
        options['compilerOptions'] = { compatConfig: { MODE: 2 } };
        return options;
      });
    config.module
      .rule('vue')
      .use('vue-svg-inline-loader')
      .loader('vue-svg-inline-loader');

    config.module
      .rule('ico')
      .test(/\.ico$/)
      .use('file-loader')
      .loader('file-loader')
      .options({
        name: '[name].[contenthash:8].[ext]',
      });
    config.plugins.delete('preload');
    if (process.env.NODE_ENV === 'production') {
      config.plugin('html').tap((options) => {
        options[0].filename = 'index.[contenthash:8].html';
        return options;
      });
    }
  },
  configureWebpack: (config) => {
    config.plugins.push(
      new LimitChunkCountPlugin({
        maxChunks: 1,
      }),
    );
    config.optimization.splitChunks = {
      cacheGroups: {
        default: false,
      },
    };
    if (process.env.NODE_ENV === 'development') {
      config.devtool = 'source-map';
    }
    const crypto = require('crypto');
    const crypto_orig_createHash = crypto.createHash;
    crypto.createHash = (algorithm) =>
      crypto_orig_createHash(algorithm == 'md4' ? 'sha256' : algorithm);

    const envName = process.env.VUE_APP_ENV_NAME;
    const hasCustomStore = process.env.CUSTOM_STORE === 'true' ? true : false;
    const hasCustomRouter = process.env.CUSTOM_ROUTER === 'true' ? true : false;
    const hasCustomAppNav =
      process.env.CUSTOM_APP_NAV === 'true' ? true : false;

    if (envName !== undefined) {
      if (hasCustomStore) {
        // If env has custom store, resolve all store modules. Currently found
        // in src/router/index.js src/store/api.js and src/main.js
        config.resolve.alias['./store$'] = `@/env/store/${envName}.js`;
        config.resolve.alias['../store$'] = `@/env/store/${envName}.js`;
      }
      if (hasCustomRouter) {
        // If env has custom router, resolve routes in src/router/index.js
        config.resolve.alias['./routes$'] = `@/env/router/${envName}.js`;
      }
      if (hasCustomAppNav) {
        // If env has custom AppNavigation, resolve AppNavigationMixin module in src/components/AppNavigation/AppNavigation.vue
        config.resolve.alias['./AppNavigationMixin$'] =
          `@/env/components/AppNavigation/${envName}.js`;
      }
    }

    if (process.env.NODE_ENV === 'production') {
      config.plugins.push(
        new CompressionPlugin({
          deleteOriginalAssets: true,
        }),
      );
    }

    config.performance = {
      hints: 'warning',
      maxEntrypointSize: 512000,
      maxAssetSize: 512000,
    };

    config.optimization.runtimeChunk = false;
  },
  pluginOptions: {
    i18n: {
      localeDir: 'locales',
      enableInSFC: true,
    },
  },
};
"
J3-Tech/Vue-Tree-Navigation,vue.config.js,"module.exports = {
    publicPath: '/Vue-Tree-Navigation/'
}"
KlausSchaefers/quant-ux,vue.config.js,"var path = require('path');
module.exports = {
  devServer: {
    proxy: {
      '^/rest': {
        //target:  'http://localhost:8082',
        target: 'https://v1.quant-ux.com',
        ws: true,
        changeOrigin: true
      },
      '^/ai': {
        target:  'https://v1.quant-ux.com',
        ws: true,
        changeOrigin: true
      }
    }
  },
  chainWebpack: config => {
    config.resolve.alias.set('src', path.resolve('src'))
    config.resolve.alias.set('assets', path.resolve('src/assets'))
    config.resolve.alias.set('components', path.resolve('src/components'))
    config.resolve.alias.set('dojo', path.resolve('src/dojo'))
    config.resolve.alias.set('common', path.resolve('src/common'))
    config.resolve.alias.set('vommond', path.resolve('src/vommond'))
    config.resolve.alias.set('views', path.resolve('src/views'))
    config.resolve.alias.set('canvas', path.resolve('src/canvas'))
    config.resolve.alias.set('page', path.resolve('src/page'))
    config.resolve.alias.set('user', path.resolve('src/user'))
    config.resolve.alias.set('core', path.resolve('src/core'))
    config.resolve.alias.set('dash', path.resolve('src/dash'))
    config.resolve.alias.set('public', path.resolve('src/public'))
    config.resolve.alias.set('services', path.resolve('src/services'))
    config.resolve.alias.set('nls', path.resolve('src/nls'))
    config.resolve.alias.set('themes', path.resolve('src/themes'))
    config.resolve.alias.set('export', path.resolve('src/export'))
    config.resolve.alias.set('examples', path.resolve('src/examples'))
    config.resolve.alias.set('help', path.resolve('src/help'))
    config.resolve.alias.set('player', path.resolve('src/player'))
    config.resolve.alias.set('style', path.resolve('src/style'))
  }
}"
Lissy93/dashy,vue.config.js,"/**
 * Dashy is built using Vue (2). This is the main Vue and Webpack configuration
 *
 * User Configurable Options:
 * - NODE_ENV: Sets the app mode (production, development, test).
 * - BASE_URL: Root URL for the app deployment (defaults to '/').
 * - INTEGRITY: Enables SRI, set to 'true' to activate.
 * - USER_DATA_DIR: Sets an alternative dir for user data (defaults ./user-data).
 * - IS_DOCKER: Indicates if running in a Docker container.
 * - IS_SERVER: Indicates if running as a server (as opposed to static build).
 *
 * Documentation:
 * - Vue CLI Config options: https://cli.vuejs.org/config
 * - For Dashy docs, see the repo: https://github.com/lissy93/dashy
 *
 * Note: ES7 syntax is not supported in this configuration context.
 * Licensed under the MIT License, (C) Alicia Sykes 2024 (see LICENSE for details).
 */

const path = require('path');
const CopyWebpackPlugin = require('copy-webpack-plugin');

// Get app mode: production, development, or test
const mode = process.env.NODE_ENV || 'production';

// Get current version
process.env.VUE_APP_VERSION = require('./package.json').version;

// Get default info for PWA
const { pwa } = require('./src/utils/defaults');

// Get base URL
const publicPath = process.env.BASE_URL || '/';

// Should enable Subresource Integrity (SRI) on link and script tags
const integrity = process.env.INTEGRITY === 'true';

// If neither env vars are set, then it's a static build
const isServer = process.env.IS_DOCKER || process.env.IS_SERVER || false;

// Use copy-webpack-plugin to copy user-data to dist IF not running as a server
const plugins = !isServer ? [
  new CopyWebpackPlugin({
    patterns: [
      { from: './user-data', to: './' },
    ],
  }),
] : [];

// Webpack Config
const configureWebpack = {
  devtool: 'source-map',
  mode,
  plugins,
  module: {
    rules: [
      { test: /.svg$/, loader: 'vue-svg-loader' },
      {
        test: /\.tsx?$/,
        loader: 'ts-loader',
        options: { appendTsSuffixTo: [/\.vue$/] },
      },
    ],
  },
  performance: {
    maxEntrypointSize: 10000000,
    maxAssetSize: 10000000,
  },
};

// Development server config
const devServer = {
  contentBase: [
    path.join(__dirname, 'public'),
    path.join(__dirname, process.env.USER_DATA_DIR || 'user-data'),
  ],
  watchContentBase: true,
  publicPath: '/',
};

// Application pages
const pages = {
  dashy: {
    entry: 'src/main.js',
    filename: 'index.html',
  },
};

// Export the main Vue app config
module.exports = {
  publicPath,
  pwa,
  integrity,
  configureWebpack,
  pages,
  devServer,
  chainWebpack: config => {
    config.module.rules.delete('svg');
  },
};
"
alfonsobries/vue-tailwind,vue.config.js,"/**
 * These are some necessary steps changing the default webpack config of the Vue CLI
 * that need to be changed in order for TypeScript based components to generate their
 * declaration (.d.ts) files.
 * Code by various users from https://github.com/vuejs/vue-cli/issues/1081
 */
const fixEmitDeclarationFilesForTypeScript = {
  chainWebpack: (config) => {
    if (process.env.NODE_ENV === 'production') {
      config.module.rule('ts').uses.delete('cache-loader');
      config.module
        .rule('ts')
        .use('ts-loader')
        .loader('ts-loader')
        .tap((options) => ({
          ...options,
          transpileOnly: false,
          happyPackMode: false,
        }));
    }
  },
  parallel: false,
};

module.exports = {
  ...fixEmitDeclarationFilesForTypeScript,
};
"
rogden/tailwind-config-viewer,vue.config.js,"module.exports = {
  publicPath: './',
  devServer: {
    proxy: 'http://localhost:3000'
  }
}
"
CzBiX/qb-web,vue.config.js,"module.exports = {
  outputDir: 'dist/public',
  publicPath: './',

  pwa: {
    // name: ""qb-web"",
    themeColor: ""#4d8ad5"",
    msTileColor: ""#4d8ad5"",
    appleMobileWebAppCapable: 'yes',

    iconPaths: {
      favicon32: 'img/icons/favicon-32x32.png',
      favicon16: 'img/icons/favicon-16x16.png',
      appleTouchIcon: 'img/icons/apple-touch-icon.png',
      maskIcon: null,
      msTileImage: null,
    },
  },

  devServer: {
    port: 8000,
    proxy: {
      '/api': {
        target: 'http://qb.test:8080',
      },
    },
  },

  chainWebpack(config) {
    config.plugin('define').tap(args => {
      let arg = args[0]
      arg = {
        ...arg,
        'process.env.GIT_TAG': JSON.stringify(process.env.GIT_TAG),
      }

      return [arg]
    })
  },
};
"
vuejs/ui,vue.config.js,"const path = require('path')

module.exports = {
  lintOnSave: false,

  outputDir: './docs',
  publicPath: './',

  configureWebpack: {
    entry: {
      app: path.resolve(__dirname, './docs-src/main.js'),
    },
    resolve: {
      alias: {
        '@style': path.resolve(__dirname, './src/style/imports.styl'),
        '@': path.resolve(__dirname, './docs-src'),
      },
    },
  },

  chainWebpack: config => {
    config.module
      .rule('js')
      .include
      .add(path.resolve(__dirname, './docs-src'))

    config.module
      .rule('vue')
      .use('vue-loader')
      .loader('vue-loader')
      .tap(options => {
        options.compilerOptions.preserveWhitespace = true
        return options
      })
  },
}
"
transferthought/transfer-thought,vue.config.js,"const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');

module.exports = {
    configureWebpack: {
        plugins: [new CaseSensitivePathsPlugin()],
        output: {
            // Ensuring the output file names are distinctly named
            filename: 'js/[name].[contenthash].js',
        },
    },
    chainWebpack: (config) => {
        config.plugins.delete('prefetch');
        // GraphQL Loader
        config.module
            .rule('html')
            .test(/\.(html)$/)
            .use('html-loader')
            .loader('html-loader')
            .end();
        // const svgRule = config.module.rule('svg');

        // svgRule.uses.clear();

        // svgRule
        //     .use('babel-loader')
        //     .loader('babel-loader')
        //     .end()
        //     .use('vue-svg-loader')
        //     .loader('vue-svg-loader');
    },
    transpileDependencies: ['vuetify'],
};
"
